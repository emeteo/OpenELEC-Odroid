#!/bin/bash

################################################################################
#      This file is part of OpenELEC - http://www.openelec.tv
#      Copyright (C) 2009-2014 Stephan Raue (stephan@openelec.tv)
#
#  OpenELEC is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 2 of the License, or
#  (at your option) any later version.
#
#  OpenELEC is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with OpenELEC.  If not, see <http://www.gnu.org/licenses/>.
################################################################################

################################################################################
# variables such as $ROOT $PATH etc... that are required for this
# script to work must be passed via env ... in scripts/image
################################################################################

# set variables
  OE_TMP=$(mktemp -d)
  LOOP=$(losetup -f)

  SYSTEM_SIZE=256
  STORAGE_SIZE=40  # STORAGE_SIZE must be >= 32 !
  SPACER=1         # SPACER is space on end of each partition (2x)
  UBOOT=2          # UBOOT must be >= 2 !

  # UBOOT + SYSTEM + SPACER + STORAGE + SPACER
  DISK_SIZE="$(( $UBOOT + $SYSTEM_SIZE + $SPACER + $STORAGE_SIZE + $SPACER ))"
  DISK="$TARGET_IMG/$IMAGE_NAME.img"

# functions
  cleanup() {
    echo "image: cleanup..."
    umount "$OE_TMP" > /dev/null 2>&1 || :
    echo "  losetup -d \"$LOOP\""
    losetup -d "$LOOP"
    echo "  rm -rf \"$OE_TMP\""
    rm -rf "$OE_TMP"
  }

  error() {
    echo "Error: $1"
    exit 99
  }

  MiB() {
    echo $(( $1 * 1024 * 1024 ))
  }

  Sector() {
    echo $(( $1 / 512 ))
  }

trap cleanup SIGINT

# ensure loopX not in use
  echo "image: preparing to write image..."
  echo "  umount \"$OE_TMP\""
  umount "$OE_TMP" > /dev/null 2>&1 || :
  echo "  umount \"$LOOP\""
  umount "$LOOP" > /dev/null 2>&1 || :
  echo "  losetup -d \"$LOOP\""
  losetup -d "$LOOP" > /dev/null 2>&1 || :

# create an image
  echo "image: creating image: $DISK..."
  echo "  dd if=/dev/zero of=$DISK bs=512 count=$(Sector $(MiB $DISK_SIZE))"
  dd if=/dev/zero of=$DISK bs=512 count=$(Sector $(MiB $DISK_SIZE)) > /dev/null 2>&1 || error "Create image failed!"
  sync

# write a disklabel
  echo "image: creating partition table on $DISK..."
  echo "  losetup \"$LOOP\" \"$DISK\""
  losetup "$LOOP" "$DISK"
  echo "  parted -s \"$LOOP\" mklabel msdos"
  parted -s "$LOOP" mklabel msdos
  sync

# create part1
  echo "image: creating partition 1 on $DISK..."
  SYSTEM_PART_START="$(Sector $(MiB $UBOOT))"
  SYSTEM_PART_END="$(($SYSTEM_PART_START + $(Sector $(MiB $SYSTEM_SIZE))))"
  echo "  parted -s \"$LOOP\" -a min unit s mkpart primary fat32 $SYSTEM_PART_START $SYSTEM_PART_END"
  parted -s "$LOOP" -a min unit s mkpart primary fat32 $SYSTEM_PART_START $SYSTEM_PART_END || error "Create partition 1 failed!"
  sync

# create part2
  echo "image: creating partition 2 on $DISK..."
  STORAGE_PART_START="$(($SYSTEM_PART_END + $(Sector $(MiB $SPACER))))"
  STORAGE_PART_END="$(($STORAGE_PART_START + $(Sector $(MiB $STORAGE_SIZE))))"
  echo "  parted -s \"$LOOP\" -a min unit s mkpart primary ext4 $STORAGE_PART_START $STORAGE_PART_END"
  parted -s "$LOOP" -a min unit s mkpart primary ext4 $STORAGE_PART_START $STORAGE_PART_END || error "Create partition 2 failed!"
  sync

# create filesystem on partition 1
  echo "  losetup -d \"$LOOP\""
  losetup -d "$LOOP"
  echo "image: creating filesystem on partition 1..."
  echo "  losetup -o $(($SYSTEM_PART_START * 512 )) --sizelimit $(MiB $SYSTEM_SIZE) \"$LOOP\" \"$DISK\""
  losetup -o $(($SYSTEM_PART_START * 512 )) --sizelimit $(MiB $SYSTEM_SIZE) "$LOOP" "$DISK" || error "Setup partition 1 loop failed!"
  echo "  mkfs.vfat -c -F 32 -n System \"$LOOP\""
  mkfs.vfat -c -F 32 -n System "$LOOP" > /dev/null 2>&1 || error "Create FS on partition 1 failed!"
  echo "  fsck -a \"$LOOP\""
  fsck -a "$LOOP" > /dev/null 2>&1 || error "Partition 1 FS check failed!"
  sync

# mount partition 1
  echo "image: mounting partition 1 on $OE_TMP..."
  echo "  mount \"$LOOP\" \"$OE_TMP\""
  mount "$LOOP" "$OE_TMP" || error "Mounting partition 1 failed"

  # copy files
  echo "image: copying files to partition 1..."
  echo "  KERNEL"
  install -D $RELEASE_DIR/target/KERNEL "$OE_TMP/KERNEL"
  echo "  SYSTEM"
  install -D $RELEASE_DIR/target/SYSTEM "$OE_TMP/SYSTEM"
  echo "  INITRD"
  install -D $RELEASE_DIR/target/INITRD "$OE_TMP/INITRD"
  for f in $(ls $RELEASE_DIR/3rdparty/bootloader/boot.* 2>/dev/null); do
    echo "  $(basename $f)"
    install -D $f "$OE_TMP/$(basename $f)"
  done
  for f in $(ls $RELEASE_DIR/3rdparty/bootloader/*.dtb 2>/dev/null); do
    echo "  $(basename $f)"
    install -D $f "$OE_TMP/$(basename $f)"
  done

# unmount partition 1
  echo "image: unmounting partition 1..."
  sync
  echo "  umount \"$LOOP\""
  umount "$LOOP"

# create filesystem on partition 2
  echo "  losetup -d \"$LOOP\""
  losetup -d "$LOOP"
  echo "image: creating filesystem on partition 2..."
  echo "  losetup -o $(($STORAGE_PART_START * 512)) --sizelimit $(MiB $STORAGE_SIZE) \"$LOOP\" \"$DISK\""
  losetup -o $(($STORAGE_PART_START * 512)) --sizelimit $(MiB $STORAGE_SIZE) "$LOOP" "$DISK" || error "Setup partition 2 loop failed!"
  echo "  mke2fs -q -t ext4 -m 0 -O ^has_journal -E stride=2,stripe-width=1024 -b 4096 -L Storage \"$LOOP\""
  mke2fs -q -t ext4 -m 0 -O ^has_journal -E stride=2,stripe-width=1024 -b 4096 -L Storage "$LOOP" > /dev/null 2>&1 || error "Create FS on partition 2 failed!"
  echo "  e2fsck -n \"$LOOP\""
  e2fsck -n "$LOOP" > /dev/null 2>&1 || error "Partition 2 FS check failed!"
  sync

# mount partition 2
  echo "image: mounting partition 2 on $OE_TMP..."
  echo "  mount \"$LOOP\" \"$OE_TMP\""
  mount "$LOOP" "$OE_TMP" || error "Mounting partition 2 failed!"

# add resize mark
  if [ "$RESIZE" = "yes" ]; then
    echo "image: adding resize mark..."
    touch "$OE_TMP/.please_resize_me"
    sync
  fi

# unmount partition 2
  echo "image: unmounting partition 2..."
  echo "  umount \"$LOOP\""
  umount "$LOOP"
  sync

# cleanup
  cleanup

# fuse image
  $ROOT/tools/mkfuse/mkfuse $DEVICE $DISK

# compress image
  gzip $DISK
